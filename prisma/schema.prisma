// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  favoriteId     String[]  @db.ObjectId
  orderedId      String[]  @db.ObjectId
  cart           Cart?
  accounts       Account[]
  products       Product[]
  orders Order[]
}

model Order {
  id String    @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  user User @relation(fields: [userId],references: [id])
  orderDate DateTime @default(now())
  status String
  total Float
  items OrderItem[]
}

model OrderItem{
  id String    @id @default(auto()) @map("_id") @db.ObjectId
  orderId String @db.ObjectId
  order Order @relation(fields: [orderId],references: [id])
  productId String @db.ObjectId
  product Product @relation(fields: [productId],references: [id])
  size String
  quantity Int
}
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Category {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String

  products Product[]
  image    String?

  @@map("categories") // Set the collection name explicitly
}

model CartItem {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  productId String  @db.ObjectId
  product   Product @relation(fields: [productId], references: [id])
  cartId    String  @db.ObjectId
  cart      Cart?    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  size      String
  Quantity  Int
}

model Cart {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  userId    String     @unique @db.ObjectId
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  cartItems CartItem[]
}

model Product {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  name             String
  price            Float
  image            String
  brand            String
  createdAt        DateTime @default(now())
  tags             String[]
  sizes            Size[]
  categoryID       String   @db.ObjectId
  category         Category @relation(fields: [categoryID], references: [id])
  currentInventory Int
  userId           String   @db.ObjectId
  description      String
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  order OrderItem[]
  cartItem CartItem[]

  @@map("products") // Set the collection name explicitly
}

model Size {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  inventory Int
  productID String  @db.ObjectId
  product   Product @relation(fields: [productID], references: [id])
}
